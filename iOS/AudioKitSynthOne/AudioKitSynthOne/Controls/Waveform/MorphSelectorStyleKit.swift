//
//  MorphSelectorStyleKit.swift
//  SynthOne
//
//  Created by Aurelius Prochazka on 10/20/17.
//  Copyright Â© 2017 AudioKit. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class MorphSelectorStyleKit : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawMorphSelector(value: CGFloat = 0, width: CGFloat = 250, height: CGFloat = 53) {
        //// Color Declarations
        let selected = UIColor(red: 0.929, green: 0.533, blue: 0.000, alpha: 1.000)
        let unselected = UIColor(red: 0.533, green: 0.533, blue: 0.533, alpha: 1.000)
        let selectedBG = UIColor(red: 0.243, green: 0.243, blue: 0.263, alpha: 0.250)

        //// Variable Declarations
        let color1 = value <= 0.25 ? selected : unselected
        let color2 = value > 0.25 && value <= 0.5 ? selected : unselected
        let color3 = value > 0.5 && value <= 0.75 ? selected : unselected
        let color4 = value > 0.75 && value <= 1 ? selected : unselected
        let xValue: CGFloat = value * 0.75 * width + 6.0 / 259.0 * width

        //// Frames
        let frame = CGRect(x: 0, y: 0, width: width, height: height)


        //// background Drawing


        //// Triangle Drawing
        let trianglePath = UIBezierPath()
        trianglePath.move(to: CGPoint(x: frame.minX + 0.05092 * frame.width, y: frame.minY + 0.52830 * frame.height))
        trianglePath.addLine(to: CGPoint(x: frame.minX + 0.07409 * frame.width, y: frame.minY + 0.37736 * frame.height))
        trianglePath.addLine(to: CGPoint(x: frame.minX + 0.12042 * frame.width, y: frame.minY + 0.67925 * frame.height))
        trianglePath.addLine(to: CGPoint(x: frame.minX + 0.15903 * frame.width, y: frame.minY + 0.37736 * frame.height))
        trianglePath.addLine(to: CGPoint(x: frame.minX + 0.18606 * frame.width, y: frame.minY + 0.52830 * frame.height))
        color1.setStroke()
        trianglePath.lineWidth = 2
        trianglePath.stroke()


        //// Square Drawing
        let squarePath = UIBezierPath()
        squarePath.move(to: CGPoint(x: frame.minX + 0.28012 * frame.width, y: frame.minY + 0.52830 * frame.height))
        squarePath.addLine(to: CGPoint(x: frame.minX + 0.28012 * frame.width, y: frame.minY + 0.37736 * frame.height))
        squarePath.addLine(to: CGPoint(x: frame.minX + 0.32259 * frame.width, y: frame.minY + 0.37736 * frame.height))
        squarePath.addLine(to: CGPoint(x: frame.minX + 0.32259 * frame.width, y: frame.minY + 0.67925 * frame.height))
        squarePath.addLine(to: CGPoint(x: frame.minX + 0.36507 * frame.width, y: frame.minY + 0.67925 * frame.height))
        squarePath.addLine(to: CGPoint(x: frame.minX + 0.36507 * frame.width, y: frame.minY + 0.37736 * frame.height))
        squarePath.addLine(to: CGPoint(x: frame.minX + 0.40754 * frame.width, y: frame.minY + 0.37736 * frame.height))
        squarePath.addLine(to: CGPoint(x: frame.minX + 0.40754 * frame.width, y: frame.minY + 0.52830 * frame.height))
        color2.setStroke()
        squarePath.lineWidth = 2
        squarePath.stroke()


        //// HighPWMValue Drawing
        let highPWMValuePath = UIBezierPath()
        highPWMValuePath.move(to: CGPoint(x: frame.minX + 0.53074 * frame.width, y: frame.minY + 0.52830 * frame.height))
        highPWMValuePath.addLine(to: CGPoint(x: frame.minX + 0.53074 * frame.width, y: frame.minY + 0.37736 * frame.height))
        highPWMValuePath.addLine(to: CGPoint(x: frame.minX + 0.55391 * frame.width, y: frame.minY + 0.37736 * frame.height))
        highPWMValuePath.addLine(to: CGPoint(x: frame.minX + 0.55391 * frame.width, y: frame.minY + 0.69811 * frame.height))
        highPWMValuePath.addLine(to: CGPoint(x: frame.minX + 0.59638 * frame.width, y: frame.minY + 0.69811 * frame.height))
        highPWMValuePath.addLine(to: CGPoint(x: frame.minX + 0.59638 * frame.width, y: frame.minY + 0.37736 * frame.height))
        highPWMValuePath.addLine(to: CGPoint(x: frame.minX + 0.61955 * frame.width, y: frame.minY + 0.37736 * frame.height))
        highPWMValuePath.addLine(to: CGPoint(x: frame.minX + 0.61955 * frame.width, y: frame.minY + 0.52830 * frame.height))
        color3.setStroke()
        highPWMValuePath.lineWidth = 2
        highPWMValuePath.stroke()


        //// Sawtooth Drawing
        let sawtoothPath = UIBezierPath()
        sawtoothPath.move(to: CGPoint(x: frame.minX + 0.74337 * frame.width, y: frame.minY + 0.54717 * frame.height))
        sawtoothPath.addLine(to: CGPoint(x: frame.minX + 0.77812 * frame.width, y: frame.minY + 0.37736 * frame.height))
        sawtoothPath.addLine(to: CGPoint(x: frame.minX + 0.77812 * frame.width, y: frame.minY + 0.71698 * frame.height))
        sawtoothPath.addLine(to: CGPoint(x: frame.minX + 0.84376 * frame.width, y: frame.minY + 0.37736 * frame.height))
        sawtoothPath.addLine(to: CGPoint(x: frame.minX + 0.84376 * frame.width, y: frame.minY + 0.71698 * frame.height))
        sawtoothPath.addLine(to: CGPoint(x: frame.minX + 0.88468 * frame.width, y: frame.minY + 0.54717 * frame.height))
        color4.setStroke()
        sawtoothPath.lineWidth = 2
        sawtoothPath.stroke()


        //// Chosen Area Drawing
        let chosenAreaPath = UIBezierPath(rect: CGRect(x: xValue, y: 4.5, width: 40.5, height: (height - 10)))
        selectedBG.setFill()
        chosenAreaPath.fill()
    }

}
