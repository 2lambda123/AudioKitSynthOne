//
//  LfoBtnStyleKit.swift
//  AudioKitSynthOne
//
//  Created by Matthew Fecher on 8/29/17.
//  Copyright Â© 2017 AudioKit. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class LfoBtnStyleKit : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawLfoButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 106, height: 38), resizing: ResizingBehavior = .aspectFit, lfoSelected: CGFloat = 1, buttonText: String = "Hello") {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 106, height: 38), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 106, y: resizedFrame.height / 38)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 106, resizedFrame.height / 38)


        //// Color Declarations
        let lfo1Color = UIColor(red: 0.902, green: 0.533, blue: 0.008, alpha: 1.000)
        let onColor = UIColor(red: 0.902, green: 0.533, blue: 0.008, alpha: 1.000)
        let btnBack = UIColor(red: 0.243, green: 0.243, blue: 0.263, alpha: 1.000)
        let offColor = UIColor(red: 0.180, green: 0.180, blue: 0.200, alpha: 1.000)
        let textColor = UIColor(red: 0.855, green: 0.855, blue: 0.855, alpha: 1.000)

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = lfo1Color
        shadow.shadowOffset = CGSize(width: 0, height: 0)
        shadow.shadowBlurRadius = 5

        //// Variable Declarations
        let indicator1On = lfoSelected == 1
        let indicator2On = lfoSelected == 2

        //// Button
        //// btnBackground Drawing
        let btnBackgroundRect = CGRect(x: 2.5, y: 2.5, width: 100, height: 32)
        let btnBackgroundPath = UIBezierPath(roundedRect: btnBackgroundRect, cornerRadius: 2)
        btnBack.setFill()
        btnBackgroundPath.fill()
        UIColor.black.setStroke()
        btnBackgroundPath.lineWidth = 1
        btnBackgroundPath.stroke()
        let btnBackgroundStyle = NSMutableParagraphStyle()
        btnBackgroundStyle.alignment = .center
        let btnBackgroundFontAttributes = [
            NSFontAttributeName: UIFont(name: "AvenirNextCondensed-Regular", size: 16)!,
            NSForegroundColorAttributeName: textColor,
            NSParagraphStyleAttributeName: btnBackgroundStyle,
        ]

        let btnBackgroundTextHeight: CGFloat = buttonText.boundingRect(with: CGSize(width: btnBackgroundRect.width, height: CGFloat.infinity), options: .usesLineFragmentOrigin, attributes: btnBackgroundFontAttributes, context: nil).height
        context.saveGState()
        context.clip(to: btnBackgroundRect)
        buttonText.draw(in: CGRect(x: btnBackgroundRect.minX, y: btnBackgroundRect.minY + (btnBackgroundRect.height - btnBackgroundTextHeight) / 2, width: btnBackgroundRect.width, height: btnBackgroundTextHeight), withAttributes: btnBackgroundFontAttributes)
        context.restoreGState()


        //// Lfo1Indicator Drawing
        let lfo1IndicatorPath = UIBezierPath(rect: CGRect(x: 10, y: 9, width: 11, height: 18))
        offColor.setFill()
        lfo1IndicatorPath.fill()


        if (indicator1On) {
            //// Lfo1Selected Drawing
            let lfo1SelectedPath = UIBezierPath(rect: CGRect(x: 10, y: 9, width: 11, height: 18))
            context.saveGState()
            context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: (shadow.shadowColor as! UIColor).cgColor)
            onColor.setFill()
            lfo1SelectedPath.fill()
            context.restoreGState()

        }


        //// Lfo2Indicator Drawing
        let lfo2IndicatorPath = UIBezierPath(rect: CGRect(x: 83, y: 9, width: 11, height: 18))
        offColor.setFill()
        lfo2IndicatorPath.fill()


        if (indicator2On) {
            //// Lfo2Selected Drawing
            let lfo2SelectedPath = UIBezierPath(rect: CGRect(x: 83, y: 9, width: 11, height: 18))
            context.saveGState()
            context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: (shadow.shadowColor as! UIColor).cgColor)
            onColor.setFill()
            lfo2SelectedPath.fill()
            context.restoreGState()

        }
        
        context.restoreGState()

    }




    @objc(LfoBtnStyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
