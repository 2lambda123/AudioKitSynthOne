//
//  FlatToggleButtonStyleKit.swift
//  AudioKitSynth
//
//  Created by Matthew Fecher on 3/8/18.
//  Copyright Â© 2018 AudioKit. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class FlatToggleButtonStyleKit : NSObject {

    //// Drawing Methods

    @objc dynamic public class func drawRoundButton(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 43), resizing: ResizingBehavior = .aspectFit, isToggled: Bool = true) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 40, height: 43), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 43)
        let resizedShadowScale: CGFloat = min(resizedFrame.width / 40, resizedFrame.height / 43)


        //// Color Declarations
        let orange = UIColor(red: 0.902, green: 0.533, blue: 0.008, alpha: 1.000)
        let gray = UIColor(red: 0.235, green: 0.235, blue: 0.255, alpha: 1.000)
        let circleoutline = UIColor(red: 0.176, green: 0.176, blue: 0.176, alpha: 1.000)
        let colorOn = UIColor(red: 0.196, green: 0.196, blue: 0.216, alpha: 1.000)

        //// Shadow Declarations
        let shadow = NSShadow()
        shadow.shadowColor = orange.withAlphaComponent(0.75 * orange.cgColor.alpha)
        shadow.shadowOffset = CGSize(width: 0, height: 0)
        shadow.shadowBlurRadius = 10

        //// buttonOff
        //// Rectangle 2 Drawing


        //// buttonBackground Drawing
        let buttonBackgroundPath = UIBezierPath(ovalIn: CGRect(x: 2.5, y: 1.5, width: 30, height: 30))
        gray.setFill()
        buttonBackgroundPath.fill()
        circleoutline.setStroke()
        buttonBackgroundPath.lineWidth = 1
        buttonBackgroundPath.stroke()


        if (isToggled) {
            //// buttonBackground 2 Drawing
            let buttonBackground2Path = UIBezierPath(ovalIn: CGRect(x: 2.5, y: 1.5, width: 30, height: 30))
            colorOn.setFill()
            buttonBackground2Path.fill()
            circleoutline.setStroke()
            buttonBackground2Path.lineWidth = 1
            buttonBackground2Path.stroke()
        }




        if (isToggled) {
            //// buttonOn
            //// Rectangle Drawing
            let rectanglePath = UIBezierPath(rect: CGRect(x: 15, y: 11, width: 4, height: 12))
            context.saveGState()
            context.setShadow(offset: CGSize(width: shadow.shadowOffset.width * resizedShadowScale, height: shadow.shadowOffset.height * resizedShadowScale), blur: shadow.shadowBlurRadius * resizedShadowScale, color: (shadow.shadowColor as! UIColor).cgColor)
            orange.setFill()
            rectanglePath.fill()
            context.restoreGState()



        }
        
        context.restoreGState()

    }




    @objc(FlatToggleButtonStyleKitResizingBehavior)
    public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
